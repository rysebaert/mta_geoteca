dep <- deepdep("mta", depth = 6)
library(deepdep)
install.packages("deepdep")
library(deepdep)
dep <- deepdep("mta", depth = 6)
dep <- deepdep("MTA", depth = 6)
plot_dependencies(dep, "circular", same_level = TRUE, reverse = TRUE, main = 'toto')
library(deepdep)
dep <- deepdep("MTA", depth = 6)
png("figures/deps.png", width  = 600, height = 450)
plot_dependencies(dep, "circular", same_level = TRUE, reverse = TRUE, main = 'toto')
dev.off()
library(deepdep)
dep <- deepdep("MTA", depth = 6)
png("figures/deps.png", width  = 600, height = 450)
plot_dependencies(dep, "circular", same_level = TRUE, reverse = TRUE, main = 'toto')
dev.off()
library(RCurl)
install.packages("RCurl")
x <- getURL("https://github.com/rysebaert/mta_rzine/blob/main/data/data.gpkg")
library(RCurl)
x <- getURL("https://github.com/rysebaert/mta_rzine/blob/main/data/data.gpkg")
y <- st_read(x, layer = "com", quiet = TRUE)
library(sf)
y <- st_read(x, layer = "com", quiet = TRUE)
x <- getURL("https://github.com/rysebaert/mta_rzine/blob/main/data/data.gpkg")
download.file("https://github.com/rysebaert/mta_rzine/blob/main/data/data.gpkg",
destfile = "data.gpkg" , mode='wb')
unzip("data.gpkg", exdir = ".")
y <- st_read("data.gpkg", layer = "com", quiet = TRUE)
download.file("https://github.com/rysebaert/mta_rzine/blob/main/data/data.gpkg",
destfile = "data.gpkg" , mode='wb')
com <- st_read("data/data.gpkg", layer = "com", quiet = TRUE)
head(com)
# Import des données
com <- st_read("data/data.gpkg", layer = "com", quiet = TRUE)
epci <- st_read("data/data.gpkg", layer = "epci", quiet = TRUE)
# Filtrer sur Paris
com <- com[com$LIB_EPCI == "Métropole du Grand Paris",]
epci <- epci[epci$LIB_EPCI == "Métropole du Grand Paris",]
# Chunk 1: setup
options(htmltools.dir.version = FALSE, crayon.enabled = TRUE)
knitr::opts_chunk$set(cache = TRUE,
fig.align='center',
message = FALSE,
warning = TRUE)
# install.packages("devtools")
# devtools::install_github("gadenbuie/countdown")
# devtools::install_github("mitchelloharawild/icons")
library(countdown)
library(icons)
#download_fontawesome()
# Chunk 3
library(MTA)
library(sf)
library(mapsf)
# Chunk 4
# Import des données
com <- st_read("data/data.gpkg", layer = "com", quiet = TRUE)
epci <- st_read("data/data.gpkg", layer = "epci", quiet = TRUE)
# Filtrer sur Paris
com <- com[com$LIB_EPCI == "Métropole du Grand Paris",]
epci <- epci[epci$LIB_EPCI == "Métropole du Grand Paris",]
# Chunk 5
head(com)
# Initialisation de l'analyse
num <- which(colnames(com) == "P16_EMPLT")
denom <- which(colnames(com) == "C16_ACTOCC1564")
colnames(com)[c(num,denom)] <- c("num", "denom")
# Retirer les valeurs égales à 0
com <- com[com$num != 0 & com$denom != 0,]
# Calculer le ratio de référence
com$ratio <- com$num / com$denom
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
breaks = c(min(com$ratio), 0.5, 0.75, 1, 1.25, 1.50, 1.75, 2, max(com$ratio)),
pal = cols, border = "white", lwd = 0.2, leg_pos = "bottomleft", leg_val_rnd = 2,
leg_title = "Emploi au lieu de travail /\nActifs occupés au lieu de résidence, 2016",
add = TRUE)
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
method = "quantile",
border = "white", lwd = 0.2, leg_pos = "bottomleft", leg_val_rnd = 2,
leg_title = "Emploi au lieu de travail /\nActifs occupés au lieu de résidence, 2016")
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
breaks = "quantile",
border = "white", lwd = 0.2, leg_pos = "bottomleft", leg_val_rnd = 2,
leg_title = "Emploi au lieu de travail /\nActifs occupés au lieu de résidence, 2016")
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
breaks = "quantile", nbreaks = 4,
border = "white", leg_pos = "bottomleft", leg_val_rnd = 2,
leg_title = "Emploi au lieu de travail /\nActifs occupés au lieu de résidence, 2016")
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
breaks = "quantile", nbreaks = 4,
border = "white",
leg_title = "Emploi au lieu de travail /\nActifs occupés au lieu de résidence, 2016")
mf_layout(title = "Ratio d'intérêt : concentration d'emploi au lieu de travail dans la MGP",
credits = credits)
# Sources
credits <- "Sources : INSEE, IGN, 2021\nRéalisation : R. Ysebaert, 2021"
mf_layout(title = "Ratio d'intérêt : concentration d'emploi au lieu de travail dans la MGP",
credits = credits)
mf_map(x = com, var = "ratio", type = "choro",
breaks = "quantile", nbreaks = 4,
border = "white",
leg_title = "Emploi au lieu de travail /\nActifs occupés au lieu de résidence, 2016")
# Sources
credits <- "Sources : INSEE, IGN, 2021 /Réalisation : R. Ysebaert, 2021"
mf_layout(title = "Ratio d'intérêt : concentration d'emploi au lieu de travail dans la MGP",
credits = credits)
# Initialisation de l'analyse
num <- which(colnames(com) == "P16_EMPLT")
denom <- which(colnames(com) == "C16_ACTOCC1564")
colnames(com)[c(num,denom)] <- c("num", "denom")
# Retirer les valeurs égales à 0
com <- com[com$num != 0 & com$denom != 0,]
# Calculer le ratio de référence
com$ratio <- com$num / com$denom
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
breaks = "quantile", nbreaks = 4,
border = "white",
leg_title = c("Emploi au lieu de travail /\n",
"Actifs occupés au lieu de résidence, 2016"))
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
breaks = "quantile", nbreaks = 4,
border = "white",
leg_title = c("Emploi au lieu de travail /\n",
"Actifs occupés au lieu de résidence, 2016"))
# Représentation cartographique
mf_map(x = com, var = "ratio", type = "choro",
breaks = "quantile", nbreaks = 4,
border = "white",
leg_title = paste0("Emploi au lieu de travail /\n",
"Actifs occupés au lieu de résidence, 2016"))
# Déviation générale
com$gdevrel <- gdev(x = com,  var1 = "num", var2 = "denom",  type = "rel")
paste0("Déviation au contexte général",
"\n(100 = moyenne de la MGP")
# Déviation générale
com$gdevabs <- gdev(x = com, var1 = "num", var2 = "denom",
type = "abs")
# Sens des déviationS
com$gdevsign <- ifelse(com$gdevabs > 0, "Excédent d'emplois",
"Déficit d'emplois")
# Cartographie
mf_map(epci, col = "peachpuff", border = "black", lwd = 1
mf_map(x = com, var = c("gdevabs", "gdevsign"), type = "prop_typo",
pal = c("#F6533A","#515FAA"), inches = 0.2,
val_order = c("Excédent d'emplois", "Déficit d'emplois"),
val_max = max(abs(com$gdevabs)), leg_val_rnd = -2
leg_pos = c("topleft","bottomleft"), border = "white",
leg_title = c("Sens de la redistribution",
paste0("Emplois à redistribuer pour atteindre",
" l'équilibre")))
mf_layout(title = "Redistributions, déviation générale", credits = credits,
arrow = FALSE)
# Déviation générale
com$gdevabs <- gdev(x = com, var1 = "num", var2 = "denom",
type = "abs")
# Sens des déviationS
com$gdevsign <- ifelse(com$gdevabs > 0, "Excédent d'emplois",
"Déficit d'emplois")
# Cartographie
mf_map(epci, col = "peachpuff", border = "black", lwd = 1)
mf_map(x = com, var = c("gdevabs", "gdevsign"), type = "prop_typo",
pal = c("#F6533A","#515FAA"), inches = 0.2,
val_order = c("Excédent d'emplois", "Déficit d'emplois"),
val_max = max(abs(com$gdevabs)), leg_val_rnd = -2
leg_pos = c("topleft","bottomleft"), border = "white",
leg_title = c("Sens de la redistribution",
paste0("Emplois à redistribuer pour atteindre",
" l'équilibre")))
mf_layout(title = "Redistributions, déviation générale", credits = credits,
arrow = FALSE)
mf_map(x = com, var = c("gdevabs", "gdevsign"), type = "prop_typo",
pal = c("#F6533A","#515FAA"), inches = 0.2,
val_order = c("Excédent d'emplois", "Déficit d'emplois"),
val_max = max(abs(com$gdevabs)), leg_val_rnd = -2
leg_pos = c("topleft","bottomleft"), border = "white",
leg_title = c("Sens de la redistribution",
paste0("Emplois à redistribuer pour atteindre",
" l'équilibre")))
# Cartographie
mf_map(epci, col = "peachpuff", border = "black", lwd = 1)
mf_map(x = com, var = c("gdevabs", "gdevsign"), type = "prop_typo",
pal = c("#F6533A","#515FAA"), inches = 0.2,
val_order = c("Excédent d'emplois", "Déficit d'emplois"),
val_max = max(abs(com$gdevabs)), leg_val_rnd = -2
leg_pos = c("topleft","bottomleft"), border = "white",
leg_title = c("Sens de la redistribution",
paste0("Emplois à redistribuer pour atteindre",
" l'équilibre")))
c("Sens de la redistribution",
paste0("Emplois à redistribuer pour atteindre",
" l'équilibre"))
mf_map(x = com, var = c("gdevabs", "gdevsign"), type = "prop_typo",
pal = c("#F6533A","#515FAA"), inches = 0.2,
val_order = c("Excédent d'emplois", "Déficit d'emplois"),
val_max = max(abs(com$gdevabs)), leg_val_rnd = -2,
leg_pos = c("topleft","bottomleft"), border = "white",
leg_title = c("Sens de la redistribution",
paste0("Emplois à redistribuer pour atteindre",
" l'équilibre")))
mf_layout(title = "Redistributions, déviation générale", credits = credits,
arrow = FALSE)
# ... Au regard de leur masse de numérateur
df$gdevabsPerc <- df$gdevabs / df$num * 100
# Mise en page des tableaux
library(flextable)
# Modèle de mise en page des tableaux
ft <- function(x, id_num){
x %>% flextable() %>%
colformat_double(j = id_num, digits = 1, big.mark = "") %>%
theme_vanilla() %>%
autofit() %>%
fontsize(size = 9)
}
# Déviation générale - top 10 des contributeurs...
df <- st_set_geometry(com, NULL)
# ... Au regard de leur masse de numérateur
df$gdevabsPerc <- df$gdevabs / df$num * 100
df <- df[order(df$gdevabsPerc, decreasing = TRUE), ]
ft(x = df[1:10, c("INSEE_COM", "NOM_COM", "LIB_EPCI_SUB", "num", "gdevabs",
"gdevabsPerc")],
id_num = c("gdevabs", "num", "gdevabsPerc"))
# Calcul typologie de synthèse
mst <- map_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel",
sdevrel = "sdevrel", threshold = 125, superior = TRUE)
# Calcul typologie de synthèse
mst <- map_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel",
sdevrel = "sdevrel", threshold = 125, superior = TRUE)
head(com)
# Déviation spatiale
com$sdevrel <- sdev(x = com,  var1 = "num", var2 = "denom",
order = 1)
# Déviation territoriale
com$tdevrel <- tdev(x = com,  var1 = "num", var2 = "denom",
key = "LIB_EPCI_SUB")
# Calcul typologie de synthèse
mst <- map_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel",
sdevrel = "sdevrel", threshold = 125, superior = TRUE)
# Extraction de la liste
com <- mst$geom
cols <- mst$cols
leg_val <- mst$leg_val
# Cartographie
mf_map(x = com, var = "mst", type = "typo", border = "white", lwd = 0.2,
pal = cols, val_order = unique(com$mst), leg_pos = "n",
add = TRUE)
# Calcul typologie de synthèse
mst <- map_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel",
sdevrel = "sdevrel", threshold = 150, superior = TRUE)
# Extraction de la liste
com <- mst$geom
cols <- mst$cols
leg_val <- mst$leg_val
# Cartographie
mf_map(x = com, var = "mst", type = "typo", border = "white", lwd = 0.2,
pal = cols, val_order = unique(com$mst), leg_pos = "n",
add = TRUE)
mf_legend(type = "typo", pos = "left", val = leg_val, pal = cols,
title = "Pour le contexte général (G)\net-ou territorial (T)\net-ou spatial (S)",)
# Ajouter des labels pour mst = 6
mf_label(x = com[com$mst == 7,], var = "NOM_COM", col = "black", bg = "white",
halo = TRUE, overlap = FALSE, cex = 0.7)
# Calcul typologie de synthèse
mst <- map_mst(x = com,
gdevrel = "gdevrel",
tdevrel = "tdevrel",
sdevrel = "sdevrel",
threshold = 200, superior = TRUE)
# Extraction de la liste
com <- mst$geom
cols <- mst$cols
leg_val <- mst$leg_val
# Cartographie
mf_map(x = com, var = "mst", type = "typo", border = "white",
lwd = 0.2, pal = cols, val_order = unique(com$mst),
leg_pos = "n")
mf_label(x = com[com$mst == 7,]
x = com[com$mst == 7,]
x = com[com$mst == 7,]
x = com[com$mst == 7,]
# Calcul typologie de synthèse
mst <- map_mst(x = com,
gdevrel = "gdevrel",
tdevrel = "tdevrel",
sdevrel = "sdevrel",
threshold = 50, superior = FALSE)
# Extraction de la liste
com <- mst$geom
cols <- mst$cols
leg_val <- mst$leg_val
com[com$mst == 7,]
plot_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel", sdevrel = "sdevrel",
lib.var = "NOM_COM", cex.names = .6,
lib.val = c("Épinay-sur-Seine", "Pierrefitte-sur-Seine", " L'Île-Saint-Denis",
"Le Pré-Saint-Gervais", "Ablon-sur-Seine", "Ville-d'Avray",
"Périgny")
legend.lab = paste0("G = Métropole du Grand Paris, T = EPCI d'appartenance,",
"S : Communes contigües (100 = moyenne du contexte)"))
plot_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel", sdevrel = "sdevrel",
lib.var = "NOM_COM", cex.names = .6,
lib.val = c("Épinay-sur-Seine", "Pierrefitte-sur-Seine", " L'Île-Saint-Denis",
"Le Pré-Saint-Gervais", "Ablon-sur-Seine", "Ville-d'Avray",
"Périgny"),
legend.lab = paste0("G = Métropole du Grand Paris, T = EPCI d'appartenance,",
"S : Communes contigües (100 = moyenne du contexte)"))
plot_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel", sdevrel = "sdevrel",
lib.var = "NOM_COM", cex.names = .6,
lib.val = c("Épinay-sur-Seine", "Pierrefitte-sur-Seine", " L'Île-Saint-Denis",
"Le Pré-Saint-Gervais", "Ablon-sur-Seine", "Ville-d'Avray",
"Périgny"),
legend.lab = paste0("G = Métropole du Grand Paris, T = EPCI d'appartenance,",
"S : Communes contigües (100 = moyenne du contexte)"))
" l'équilibre")))
plot_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel", sdevrel = "sdevrel",
lib.var = "NOM_COM", cex.names = .6,
lib.val = c("Épinay-sur-Seine", "Pierrefitte-sur-Seine", " L'Île-Saint-Denis",
"Le Pré-Saint-Gervais", "Ablon-sur-Seine", "Ville-d'Avray",
"Périgny"),
legend.lab = paste0("G = Métropole du Grand Paris, T = EPCI d'appartenance,",
"S : Communes contigües (100 = moyenne du contexte)"))
plot_mst(x = com, gdevrel = "gdevrel", tdevrel = "tdevrel", sdevrel = "sdevrel",
lib.var = "NOM_COM", cex.names = .6,
lib.val = c("Épinay-sur-Seine", "Pierrefitte-sur-Seine", "L'Île-Saint-Denis",
"Le Pré-Saint-Gervais", "Ablon-sur-Seine", "Ville-d'Avray",
"Périgny"),
legend.lab = paste0("G = Métropole du Grand Paris, T = EPCI d'appartenance,",
"S : Communes contigües (100 = moyenne du contexte)"))
lib.val = c("Genevilliers", "Saint-Denis")
)
plot_bidev(x = com,  dev1 = "gdevrel",  dev2 = "tdevrel",
dev1.lab = "Déviation générale (MGP)",
dev2.lab = "Déviation territoriale (EPCI d'appartenance)",
lib.var = "NOM_COM",
lib.val = c("Genevilliers", "Saint-Denis"))
plot_bidev(x = com,  dev1 = "gdevrel",  dev2 = "tdevrel",
dev1.lab = "Déviation générale (MGP)",
dev2.lab = "Déviation territoriale (EPCI d'appartenance)",
lib.var = "NOM_COM",
lib.val = c("Gennevilliers", "Saint-Denis"))
install.packages("MTA")
library(deepdep)
dep <- deepdep("MTA", depth = 6)
png("figures/deps.png", width  = 600, height = 450)
plot_dependencies(dep, "circular", same_level = TRUE, reverse = TRUE, main = 'toto')
dev.off()
install.packages("hexSticker")
library(hexSticker)
geom_hexagon(size = 1.2, fill = NA, color = "#385f94")
geom_hexagon(size = 1.2, fill = "white", color = "#385f94")
geom_pkgname(
"MTA",
x = 1,
y = 1.4,
color = "#FFFFFF",
family = "Aller_Rg",
fontface = "plain",
size = 8,
...
)
geom_pkgname(
"MTA",
x = 1,
y = 1.4,
color = "#FFFFFF",
family = "Aller_Rg",
fontface = "plain",
size = 8
)
save_sticker(filename = "../../Downloads/sticker.svg", sticker = last_plot(), ...)
geom_pkgname(
"MTA",
x = 1,
y = 1.4,
color = "#FFFFFF",
family = "Aller_Rg",
fontface = "plain",
size = 8
)
save_sticker(filename = "../../Downloads/sticker.svg", sticker = last_plot(), ...)
save_sticker(filename = "sticker.svg", sticker = last_plot(), ...)
save_sticker(filename = "../../Downloads/sticker.svg", sticker = last_plot())
xx <- geom_pkgname(
"MTA",
x = 1,
y = 1.4,
color = "#FFFFFF",
family = "Aller_Rg",
fontface = "plain",
size = 8
)
save_sticker(filename = "../../Downloads/sticker.svg", sticker = xx)
